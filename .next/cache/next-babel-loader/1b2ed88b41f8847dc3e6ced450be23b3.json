{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'isomorphic-unfetch';\nimport clientCredentials from '../credentials/client';\nimport Entry from '../components/Entry';\nexport default class Index extends Component {\n  static async getInitialProps({\n    req,\n    query\n  }) {\n    const user = req && req.session ? req.session.decodedToken : null; // don't fetch anything from firebase if the user is not found\n    // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\n    // const messages = snap && snap.val()\n\n    const messages = null;\n    return {\n      user,\n      messages\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: this.props.user,\n      value: '',\n      messages: this.props.messages\n    };\n    this.addDbListener = this.addDbListener.bind(this);\n    this.removeDbListener = this.removeDbListener.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    firebase.initializeApp(clientCredentials);\n    if (this.state.user) this.addDbListener();\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          user: user\n        });\n        return user.getIdToken().then(token => {\n          // eslint-disable-next-line no-undef\n          return fetch('/api/login', {\n            method: 'POST',\n            // eslint-disable-next-line no-undef\n            headers: new Headers({\n              'Content-Type': 'application/json'\n            }),\n            credentials: 'same-origin',\n            body: JSON.stringify({\n              token\n            })\n          });\n        }).then(res => this.addDbListener());\n      } else {\n        this.setState({\n          user: null\n        }); // eslint-disable-next-line no-undef\n\n        fetch('/api/logout', {\n          method: 'POST',\n          credentials: 'same-origin'\n        }).then(() => this.removeDbListener());\n      }\n    });\n  }\n\n  addDbListener() {\n    var db = firebase.firestore();\n    let unsubscribe = db.collection('messages').onSnapshot(querySnapshot => {\n      var messages = {};\n      querySnapshot.forEach(function (doc) {\n        messages[doc.id] = doc.data();\n      });\n      if (messages) this.setState({\n        messages\n      });\n    }, error => {\n      console.error(error);\n    });\n    this.setState({\n      unsubscribe\n    });\n  }\n\n  removeDbListener() {\n    // firebase.database().ref('messages').off()\n    if (this.state.unsubscribe) {\n      this.state.unsubscribe();\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var db = firebase.firestore();\n    const date = new Date().getTime();\n    console.log(this.state.user.email);\n    const myObject = [{\n      game: '1',\n      value: 5\n    }];\n    db.collection('results').doc(`${this.state.user.email}`).set({\n      // id: date,\n      text: myObject\n    });\n    this.setState({\n      value: ''\n    });\n  }\n\n  handleLogin() {\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());\n  }\n\n  handleLogout() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    const {\n      user,\n      value,\n      messages\n    } = this.state;\n    return __jsx(\"div\", null, user ? __jsx(\"button\", {\n      onClick: this.handleLogout\n    }, \"Logout\") : __jsx(\"button\", {\n      onClick: this.handleLogin\n    }, \"Login\"), user && __jsx(\"div\", null, __jsx(\"form\", {\n      onSubmit: this.handleSubmit\n    }, __jsx(\"input\", {\n      type: 'text',\n      onChange: this.handleChange,\n      placeholder: 'add message...',\n      value: value\n    })), __jsx(\"ul\", null, messages && Object.keys(messages).map(key => __jsx(\"li\", {\n      key: key\n    }, messages[key].text)))), __jsx(Entry, null));\n  }\n\n}","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/dfs-results/pages/index.js"],"names":["React","Component","firebase","clientCredentials","Entry","Index","getInitialProps","req","query","user","session","decodedToken","messages","constructor","props","state","value","addDbListener","bind","removeDbListener","handleChange","handleSubmit","componentDidMount","initializeApp","auth","onAuthStateChanged","setState","getIdToken","then","token","fetch","method","headers","Headers","credentials","body","JSON","stringify","res","db","firestore","unsubscribe","collection","onSnapshot","querySnapshot","forEach","doc","id","data","error","console","event","target","preventDefault","date","Date","getTime","log","email","myObject","game","set","text","handleLogin","signInWithPopup","GoogleAuthProvider","handleLogout","signOut","render","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'isomorphic-unfetch'\nimport clientCredentials from '../credentials/client'\nimport Entry from '../components/Entry'\n\nexport default class Index extends Component {\n  static async getInitialProps({ req, query }) {\n    const user = req && req.session ? req.session.decodedToken : null\n    // don't fetch anything from firebase if the user is not found\n    // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\n    // const messages = snap && snap.val()\n    const messages = null\n    return { user, messages }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      user: this.props.user,\n      value: '',\n      messages: this.props.messages,\n    }\n\n    this.addDbListener = this.addDbListener.bind(this)\n    this.removeDbListener = this.removeDbListener.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    firebase.initializeApp(clientCredentials)\n\n    if (this.state.user) this.addDbListener()\n\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user: user })\n        return user\n          .getIdToken()\n          .then(token => {\n            // eslint-disable-next-line no-undef\n            return fetch('/api/login', {\n              method: 'POST',\n              // eslint-disable-next-line no-undef\n              headers: new Headers({ 'Content-Type': 'application/json' }),\n              credentials: 'same-origin',\n              body: JSON.stringify({ token }),\n            })\n          })\n          .then(res => this.addDbListener())\n      } else {\n        this.setState({ user: null })\n        // eslint-disable-next-line no-undef\n        fetch('/api/logout', {\n          method: 'POST',\n          credentials: 'same-origin',\n        }).then(() => this.removeDbListener())\n      }\n    })\n  }\n\n  addDbListener() {\n    var db = firebase.firestore()\n    let unsubscribe = db.collection('messages').onSnapshot(\n      querySnapshot => {\n        var messages = {}\n        querySnapshot.forEach(function(doc) {\n          messages[doc.id] = doc.data()\n        })\n        if (messages) this.setState({ messages })\n      },\n      error => {\n        console.error(error)\n      }\n    )\n    this.setState({ unsubscribe })\n  }\n\n  removeDbListener() {\n    // firebase.database().ref('messages').off()\n    if (this.state.unsubscribe) {\n      this.state.unsubscribe()\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    var db = firebase.firestore()\n    const date = new Date().getTime()\n    console.log(this.state.user.email)\n    const myObject = [{game: '1', value: 5}]\n    db.collection('results')\n      .doc(`${this.state.user.email}`)\n      .set({\n        // id: date,\n        text: myObject,\n      })\n    this.setState({ value: '' })\n    \n  }\n\n  handleLogin() {\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider())\n  }\n\n  handleLogout() {\n    firebase.auth().signOut()\n  }\n\n  render() {\n    const { user, value, messages } = this.state\n\n    return (\n      <div>\n        {user ? (\n          <button onClick={this.handleLogout}>Logout</button>\n        ) : (\n          <button onClick={this.handleLogin}>Login</button>\n        )}\n        {user && (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type={'text'}\n                onChange={this.handleChange}\n                placeholder={'add message...'}\n                value={value}\n              />\n            </form>\n            <ul>\n              {messages &&\n                Object.keys(messages).map(key => (\n                  <li key={key}>{messages[key].text}</li>\n                ))}\n            </ul>\n          </div>\n        )}\n\n        {/* so ultimately this can just be a giant component that can move up into the previous div - so it hidden unless we log in */}\n        <Entry />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}