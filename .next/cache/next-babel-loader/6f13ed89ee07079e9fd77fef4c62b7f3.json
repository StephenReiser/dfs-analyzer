{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { CSVReader } from 'react-papaparse';\nimport Button from '@material-ui/core/Button';\n\nvar CSVComp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CSVComp, _Component);\n\n  function CSVComp(props) {\n    var _this;\n\n    _classCallCheck(this, CSVComp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CSVComp).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReadCSV\", function (data) {\n      console.log(data);\n\n      var cleanData = _this.convertDataToNumbers(_this.convertToObject(data));\n\n      _this.props.setMyData(cleanData);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnError\", function (err, file, inputElem, reason) {\n      console.log(err);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleImportOffer\", function () {\n      _this.fileInput.current.click();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertToObject\", function (anArray) {\n      var data = anArray,\n          keys = data.data[0],\n          result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n          temp[k] = a[i];\n        });\n        return temp;\n      });\n      return result;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertDataToNumbers\", function (badArray) {\n      var myData = _toConsumableArray(badArray);\n\n      myData.map(function (item, i) {\n        console.log(item, i);\n        newData[i].Entry_Key = _parseInt(item.Entry_Key);\n        newData[i].Contest_Key = _parseInt(item.Contest_Key);\n        newData[i].Place = _parseInt(item.Place);\n        newData[i].Points = _parseInt(item.Points);\n        newData[i].Winnings_Non_Ticket = _parseInt(item.Winnings_Non_Ticket.slice(1));\n        newData[i].Winnings_Ticket = _parseInt(item.Winnings_Ticket.slice(1));\n        newData[i].Contest_Entries = _parseInt(item.Contest_Entries);\n        newData[i].Entry_Fee = _parseInt(item.Entry_Fee.slice(1));\n        newData[i].Prize_Pool = _parseInt(item.Prize_Pool.slice(1));\n        newData[i].Places_Paid = _parseInt(item.Places_Paid);\n      });\n      console.log(newData);\n    });\n\n    _this.fileInput = React.createRef();\n    return _this;\n  }\n\n  _createClass(CSVComp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var myData = [{\n        amount: '$5.00',\n        test: 'test'\n      }, {\n        amount: '$10.00',\n        test: 'test'\n      }];\n      var newData = [].concat(myData);\n      myData.map(function (item, i) {\n        console.log(item, i);\n        newData[i].amount = _parseInt(item.amount.slice(1));\n      });\n      console.log(newData);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null, __jsx(CSVReader, {\n        onFileLoaded: this.handleReadCSV,\n        inputRef: this.fileInput,\n        style: {\n          display: 'none'\n        },\n        onError: this.handleOnError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), __jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleImportOffer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Import\"));\n    }\n  }]);\n\n  return CSVComp;\n}(Component);\n\nexport default CSVComp;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js"],"names":["React","Component","CSVReader","Button","CSVComp","props","data","console","log","cleanData","convertDataToNumbers","convertToObject","setMyData","err","file","inputElem","reason","fileInput","current","click","anArray","keys","result","slice","map","a","temp","forEach","k","i","badArray","myData","item","newData","Entry_Key","Contest_Key","Place","Points","Winnings_Non_Ticket","Winnings_Ticket","Contest_Entries","Entry_Fee","Prize_Pool","Places_Paid","createRef","amount","test","handleReadCSV","display","handleOnError","handleImportOffer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n \nimport { CSVReader } from 'react-papaparse'\nimport Button from '@material-ui/core/Button';\n \nclass CSVComp extends Component {\n  constructor(props) {\n    super(props)\n    this.fileInput = React.createRef()\n  }\n  componentDidMount() {\n    const myData = [\n    {\n      amount: '$5.00',\n      test: 'test'\n    },\n    {\n      amount: '$10.00',\n      test: 'test'\n    }\n\n    \n\n  ]\n\n  const newData = [...myData]\n  \n  myData.map((item, i) => {\n    console.log(item, i)\n    newData[i].amount = parseInt(item.amount.slice(1))\n  })\n  \n  console.log(newData)\n\n  \n  }\n \n  handleReadCSV = (data) => {\n    console.log(data)\n\n    const cleanData = this.convertDataToNumbers(this.convertToObject(data))\n    this.props.setMyData(cleanData)\n    \n    \n  }\n \n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n \n  handleImportOffer = () => {\n    this.fileInput.current.click()\n  }\n\n  convertToObject = (anArray) => {\n    var data = anArray,\n    keys = data.data[0],\n    result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n            temp[k] = a[i];\n        })\n        return temp;\n    });\n    \n    return result\n\n};\nconvertDataToNumbers = (badArray) => {\n  const myData = [...badArray]\n  \n  myData.map((item, i) => {\n    console.log(item, i)\n    newData[i].Entry_Key = parseInt(item.Entry_Key)\n    newData[i].Contest_Key = parseInt(item.Contest_Key)\n    newData[i].Place = parseInt(item.Place)\n    newData[i].Points = parseInt(item.Points)\n    newData[i].Winnings_Non_Ticket = parseInt(item.Winnings_Non_Ticket.slice(1))\n    newData[i].Winnings_Ticket = parseInt(item.Winnings_Ticket.slice(1))\n    newData[i].Contest_Entries = parseInt(item.Contest_Entries)\n    newData[i].Entry_Fee = parseInt(item.Entry_Fee.slice(1))\n    newData[i].Prize_Pool = parseInt(item.Prize_Pool.slice(1))\n    newData[i].Places_Paid = parseInt(item.Places_Paid)\n    \n\n\n  })\n  \n  console.log(newData)\n  \n    \n\n\n}\n \n  render() {\n    return (\n      <>\n        <CSVReader\n          onFileLoaded={this.handleReadCSV}\n          inputRef={this.fileInput}\n          style={{display: 'none'}}\n          onError={this.handleOnError}\n        />\n\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleImportOffer}>\n            Import\n        </Button>\n       \n      </>\n    )\n  }\n}\n \nexport default CSVComp"]},"metadata":{},"sourceType":"module"}