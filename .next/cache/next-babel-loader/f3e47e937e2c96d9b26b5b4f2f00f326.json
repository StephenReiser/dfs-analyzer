{"ast":null,"code":"var _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { CSVReader } from 'react-papaparse';\nimport Button from '@material-ui/core/Button';\n\nclass CSVComp extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleReadCSV\", data => {\n      console.log(data);\n      this.props.setMyData(this.convertToObject(data));\n    });\n\n    _defineProperty(this, \"handleOnError\", (err, file, inputElem, reason) => {\n      console.log(err);\n    });\n\n    _defineProperty(this, \"handleImportOffer\", () => {\n      this.fileInput.current.click();\n    });\n\n    _defineProperty(this, \"convertToObject\", anArray => {\n      var data = anArray,\n          keys = data.data[0],\n          result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n          temp[k] = a[i];\n        });\n        return temp;\n      });\n      return result;\n    });\n\n    _defineProperty(this, \"convertDataToNumbers\", () => {\n      const myData = [{\n        amount: '$5.00',\n        test: 'test'\n      }, {\n        amount: '$10.00',\n        test: 'test'\n      }];\n      const result = myData.reduce((s, e) => s + parseInt(e.amount.slice(1)), 0);\n      console.log(result);\n    });\n\n    this.fileInput = React.createRef();\n  }\n\n  componentDidMount() {\n    const myData = [{\n      amount: '$5.00',\n      test: 'test'\n    }, {\n      amount: '$10.00',\n      test: 'test'\n    }];\n    const myNewData = [...myNewData];\n    myNewData.forEach(item => myNewData[item].amount = parseInt(myNewData[item].amount.slice(1)));\n    console.log(myNewData);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(CSVReader, {\n      onFileLoaded: this.handleReadCSV,\n      inputRef: this.fileInput,\n      style: {\n        display: 'none'\n      },\n      onError: this.handleOnError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleImportOffer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Import\"));\n  }\n\n}\n\nexport default CSVComp;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js"],"names":["React","Component","CSVReader","Button","CSVComp","constructor","props","data","console","log","setMyData","convertToObject","err","file","inputElem","reason","fileInput","current","click","anArray","keys","result","slice","map","a","temp","forEach","k","i","myData","amount","test","reduce","s","e","parseInt","createRef","componentDidMount","myNewData","item","render","handleReadCSV","display","handleOnError","handleImportOffer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n \nimport { CSVReader } from 'react-papaparse'\nimport Button from '@material-ui/core/Button';\n \nclass CSVComp extends Component {\n  constructor(props) {\n    super(props)\n    this.fileInput = React.createRef()\n  }\n  componentDidMount() {\n    const myData = [\n    {\n      amount: '$5.00',\n      test: 'test'\n    },\n    {\n      amount: '$10.00',\n      test: 'test'\n    }\n\n    \n\n  ]\n\n  const myNewData = [...myNewData]\n  \n  myNewData.forEach(item => myNewData[item].amount = parseInt(myNewData[item].amount.slice(1)))\n  console.log(myNewData)\n\n  \n  }\n \n  handleReadCSV = (data) => {\n    console.log(data)\n    this.props.setMyData(this.convertToObject(data))\n    \n    \n  }\n \n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n \n  handleImportOffer = () => {\n    this.fileInput.current.click()\n  }\n\n  convertToObject = (anArray) => {\n    var data = anArray,\n    keys = data.data[0],\n    result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n            temp[k] = a[i];\n        })\n        return temp;\n    });\n    \n    return result\n\n};\nconvertDataToNumbers = () => {\n  const myData = [\n    {\n      amount: '$5.00',\n      test: 'test'\n    },\n    {\n      amount: '$10.00',\n      test: 'test'\n    }\n\n    \n\n  ]\n\n  const result = myData.reduce((s, e) => s + parseInt(e.amount.slice(1)), 0);\n  console.log(result)\n  \n\n}\n \n  render() {\n    return (\n      <>\n        <CSVReader\n          onFileLoaded={this.handleReadCSV}\n          inputRef={this.fileInput}\n          style={{display: 'none'}}\n          onError={this.handleOnError}\n        />\n\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleImportOffer}>\n            Import\n        </Button>\n       \n      </>\n    )\n  }\n}\n \nexport default CSVComp"]},"metadata":{},"sourceType":"module"}