{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/Table.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport DFSTableData from './DFSTableData';\nvar useStyles1 = makeStyles(function (theme) {\n  return {\n    root: {\n      flexShrink: 0,\n      marginLeft: theme.spacing(2.5)\n    }\n  };\n}); // END USESTYLES\n\nfunction TablePaginationActions(props) {\n  var classes = useStyles1();\n  var theme = useTheme();\n  var count = props.count,\n      page = props.page,\n      rowsPerPage = props.rowsPerPage,\n      onChangePage = props.onChangePage;\n\n  var handleFirstPageButtonClick = function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  };\n\n  var handleBackButtonClick = function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  };\n\n  var handleNextButtonClick = function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  };\n\n  var handleLastPageButtonClick = function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(IconButton, {\n    onClick: handleFirstPageButtonClick,\n    disabled: page === 0,\n    \"aria-label\": \"first page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, theme.direction === 'rtl' ? __jsx(LastPageIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }) : __jsx(FirstPageIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), __jsx(IconButton, {\n    onClick: handleBackButtonClick,\n    disabled: page === 0,\n    \"aria-label\": \"previous page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, theme.direction === 'rtl' ? __jsx(KeyboardArrowRight, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }) : __jsx(KeyboardArrowLeft, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })), __jsx(IconButton, {\n    onClick: handleNextButtonClick,\n    disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n    \"aria-label\": \"next page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, theme.direction === 'rtl' ? __jsx(KeyboardArrowLeft, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }) : __jsx(KeyboardArrowRight, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), __jsx(IconButton, {\n    onClick: handleLastPageButtonClick,\n    disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n    \"aria-label\": \"last page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, theme.direction === 'rtl' ? __jsx(FirstPageIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }) : __jsx(LastPageIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })));\n} // END TABLE ACTIONS\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired\n}; // END TABLE ACTIONS PROPTYPES\n// function createData(name, calories, fat) {\n//   return { name, calories, fat };\n// }\n// const rows = [\n//   createData('Cupcake', 305, 3.7),\n//   createData('Donut', 452, 25.0),\n//   createData('Eclair', 262, 16.0),\n//   createData('Frozen yoghurt', 159, 6.0),\n//   createData('Gingerbread', 356, 16.0),\n//   createData('Honeycomb', 408, 3.2),\n//   createData('Ice cream sandwich', 237, 9.0),\n//   createData('Jelly Bean', 375, 0.0),\n//   createData('KitKat', 518, 26.0),\n//   createData('Lollipop', 392, 0.2),\n//   createData('Marshmallow', 318, 0),\n//   createData('Nougat', 360, 19.0),\n//   createData('Oreo', 437, 18.0),\n// ]\n// .sort((a, b) => (a.calories < b.calories ? -1 : 1));\n\nvar useStyles2 = makeStyles({\n  table: {\n    minWidth: 500\n  }\n});\n\nvar CustomPaginationActionsTable = function CustomPaginationActionsTable(props) {\n  var classes = useStyles2();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      page = _React$useState2[0],\n      setPage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(25),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rowsPerPage = _React$useState4[0],\n      setRowsPerPage = _React$useState4[1];\n\n  useEffect(function () {\n    console.log(props.myDFSResults);\n  }, [props.myDFSResults]);\n  var emptyRows = rowsPerPage - Math.min(rowsPerPage, props.myDFSResults.length - page * rowsPerPage);\n\n  var handleChangePage = function handleChangePage(event, newPage) {\n    setPage(newPage);\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(event) {\n    setRowsPerPage(_parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return __jsx(TableContainer, {\n    component: Paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"custom pagination table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, __jsx(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, (rowsPerPage > 0 ? props.myDFSResults.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : props.myDFSResults).map(function (row) {\n    return __jsx(DFSTableData, {\n      key: row.Entry_Key,\n      data: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    });\n  }), emptyRows > 0 && __jsx(TableRow, {\n    style: {\n      height: 53 * emptyRows\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    colSpan: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }))), __jsx(TableFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, __jsx(TablePagination, {\n    rowsPerPageOptions: [25, 50, 100, {\n      label: 'All',\n      value: -1\n    }],\n    colSpan: 6,\n    count: props.myDFSResults.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    SelectProps: {\n      inputProps: {\n        'aria-label': 'rows per page'\n      },\n      \"native\": true\n    },\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    ActionsComponent: TablePaginationActions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  })))));\n};\n\nexport default CustomPaginationActionsTable;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/Table.js"],"names":["React","useEffect","PropTypes","makeStyles","useTheme","Table","TableBody","TableCell","TableContainer","TableFooter","TablePagination","TableRow","Paper","IconButton","FirstPageIcon","KeyboardArrowLeft","KeyboardArrowRight","LastPageIcon","DFSTableData","useStyles1","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","count","page","rowsPerPage","onChangePage","handleFirstPageButtonClick","event","handleBackButtonClick","handleNextButtonClick","handleLastPageButtonClick","Math","max","ceil","direction","propTypes","number","isRequired","func","useStyles2","table","minWidth","CustomPaginationActionsTable","useState","setPage","setRowsPerPage","console","log","myDFSResults","emptyRows","min","length","handleChangePage","newPage","handleChangeRowsPerPage","target","value","slice","map","row","Entry_Key","height","label","inputProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport DFSTableData from './DFSTableData'\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\n\n// END USESTYLES\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = event => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = event => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = event => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = event => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\n\n// END TABLE ACTIONS\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\n// END TABLE ACTIONS PROPTYPES\n\n// function createData(name, calories, fat) {\n//   return { name, calories, fat };\n// }\n\n// const rows = [\n//   createData('Cupcake', 305, 3.7),\n//   createData('Donut', 452, 25.0),\n//   createData('Eclair', 262, 16.0),\n//   createData('Frozen yoghurt', 159, 6.0),\n//   createData('Gingerbread', 356, 16.0),\n//   createData('Honeycomb', 408, 3.2),\n//   createData('Ice cream sandwich', 237, 9.0),\n//   createData('Jelly Bean', 375, 0.0),\n//   createData('KitKat', 518, 26.0),\n//   createData('Lollipop', 392, 0.2),\n//   createData('Marshmallow', 318, 0),\n//   createData('Nougat', 360, 19.0),\n//   createData('Oreo', 437, 18.0),\n// ]\n// .sort((a, b) => (a.calories < b.calories ? -1 : 1));\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n});\n\nconst CustomPaginationActionsTable = (props) => {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(25);\n\n  useEffect(() => {\n      console.log(props.myDFSResults)\n  }, [\n    props.myDFSResults\n  ])\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.myDFSResults.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"custom pagination table\">\n        <TableBody>\n          {(rowsPerPage > 0\n            ? props.myDFSResults.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : props.myDFSResults\n          ).map(row => (\n\n            <DFSTableData \n            key = {row.Entry_Key} \n            data = {row}\n            />\n            \n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[25, 50, 100, { label: 'All', value: -1 }]}\n              colSpan={6}\n              count={props.myDFSResults.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default CustomPaginationActionsTable"]},"metadata":{},"sourceType":"module"}