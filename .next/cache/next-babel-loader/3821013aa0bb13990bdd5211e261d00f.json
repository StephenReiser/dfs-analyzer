{"ast":null,"code":"var _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { CSVReader } from 'react-papaparse';\nimport Button from '@material-ui/core/Button';\n\nclass CSVComp extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleReadCSV\", data => {\n      console.log(data);\n      const cleanData = this.convertDataToNumbers(this.convertToObject(data));\n      this.props.setMyData(cleanData);\n    });\n\n    _defineProperty(this, \"handleOnError\", (err, file, inputElem, reason) => {\n      console.log(err);\n    });\n\n    _defineProperty(this, \"handleImportOffer\", () => {\n      this.fileInput.current.click();\n    });\n\n    _defineProperty(this, \"convertToObject\", anArray => {\n      var data = anArray,\n          keys = data.data[0],\n          result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n          temp[k] = a[i];\n        });\n        return temp;\n      });\n      return result;\n    });\n\n    _defineProperty(this, \"convertDataToNumbers\", badArray => {\n      const myData = [...badArray];\n      myData.map((item, i) => {\n        console.log(item, i);\n        myData[i].Entry_Key = parseInt(item.Entry_Key);\n        myData[i].Contest_Key = parseInt(item.Contest_Key);\n        myData[i].Place = parseInt(item.Place);\n        myData[i].Points = parseInt(item.Points);\n        myData[i].Winnings_Non_Ticket = parseInt(item.Winnings_Non_Ticket.slice(1));\n        myData[i].Winnings_Ticket = parseInt(item.Winnings_Ticket.slice(1));\n        myData[i].Contest_Entries = parseInt(item.Contest_Entries);\n        myData[i].Entry_Fee = parseInt(item.Entry_Fee.slice(1));\n        myData[i].Prize_Pool = parseInt(item.Prize_Pool.slice(1));\n        myData[i].Places_Paid = parseInt(item.Places_Paid);\n      });\n      console.log(myData);\n      return myData;\n    });\n\n    this.fileInput = React.createRef();\n  }\n\n  componentDidMount() {\n    const myData = [{\n      amount: '$5.00',\n      test: 'test'\n    }, {\n      amount: '$10.00',\n      test: 'test'\n    }];\n    const newData = [...myData];\n    myData.map((item, i) => {\n      console.log(item, i);\n      newData[i].amount = parseInt(item.amount.slice(1));\n    });\n    console.log(newData);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(CSVReader, {\n      onFileLoaded: this.handleReadCSV,\n      inputRef: this.fileInput,\n      style: {\n        display: 'none'\n      },\n      onError: this.handleOnError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleImportOffer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Import\"));\n  }\n\n}\n\nexport default CSVComp;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js"],"names":["React","Component","CSVReader","Button","CSVComp","constructor","props","data","console","log","cleanData","convertDataToNumbers","convertToObject","setMyData","err","file","inputElem","reason","fileInput","current","click","anArray","keys","result","slice","map","a","temp","forEach","k","i","badArray","myData","item","Entry_Key","parseInt","Contest_Key","Place","Points","Winnings_Non_Ticket","Winnings_Ticket","Contest_Entries","Entry_Fee","Prize_Pool","Places_Paid","createRef","componentDidMount","amount","test","newData","render","handleReadCSV","display","handleOnError","handleImportOffer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n \nimport { CSVReader } from 'react-papaparse'\nimport Button from '@material-ui/core/Button';\n \nclass CSVComp extends Component {\n  constructor(props) {\n    super(props)\n    this.fileInput = React.createRef()\n  }\n  componentDidMount() {\n    const myData = [\n    {\n      amount: '$5.00',\n      test: 'test'\n    },\n    {\n      amount: '$10.00',\n      test: 'test'\n    }\n\n    \n\n  ]\n\n  const newData = [...myData]\n  \n  myData.map((item, i) => {\n    console.log(item, i)\n    newData[i].amount = parseInt(item.amount.slice(1))\n  })\n  \n  console.log(newData)\n\n  \n  }\n \n  handleReadCSV = (data) => {\n    console.log(data)\n\n    const cleanData = this.convertDataToNumbers(this.convertToObject(data))\n    this.props.setMyData(cleanData)\n    \n    \n  }\n \n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n \n  handleImportOffer = () => {\n    this.fileInput.current.click()\n  }\n\n  convertToObject = (anArray) => {\n    var data = anArray,\n    keys = data.data[0],\n    result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n            temp[k] = a[i];\n        })\n        return temp;\n    });\n    \n    return result\n\n};\nconvertDataToNumbers = (badArray) => {\n  const myData = [...badArray]\n  \n  myData.map((item, i) => {\n    console.log(item, i)\n    myData[i].Entry_Key = parseInt(item.Entry_Key)\n    myData[i].Contest_Key = parseInt(item.Contest_Key)\n    myData[i].Place = parseInt(item.Place)\n    myData[i].Points = parseInt(item.Points)\n    myData[i].Winnings_Non_Ticket = parseInt(item.Winnings_Non_Ticket.slice(1))\n    myData[i].Winnings_Ticket = parseInt(item.Winnings_Ticket.slice(1))\n    myData[i].Contest_Entries = parseInt(item.Contest_Entries)\n    myData[i].Entry_Fee = parseInt(item.Entry_Fee.slice(1))\n    myData[i].Prize_Pool = parseInt(item.Prize_Pool.slice(1))\n    myData[i].Places_Paid = parseInt(item.Places_Paid)\n    \n\n\n  })\n  \n  console.log(myData)\n  return myData\n  \n    \n\n\n}\n \n  render() {\n    return (\n      <>\n        <CSVReader\n          onFileLoaded={this.handleReadCSV}\n          inputRef={this.fileInput}\n          style={{display: 'none'}}\n          onError={this.handleOnError}\n        />\n\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleImportOffer}>\n            Import\n        </Button>\n       \n      </>\n    )\n  }\n}\n \nexport default CSVComp"]},"metadata":{},"sourceType":"module"}