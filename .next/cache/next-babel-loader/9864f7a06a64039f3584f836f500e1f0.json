{"ast":null,"code":"var _jsxFileName = \"/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { CSVReader } from 'react-papaparse';\nimport Button from '@material-ui/core/Button';\n\nclass CSVComp extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleReadCSV\", data => {\n      console.log(data);\n      this.props.setMyData(this.convertToObject(data));\n    });\n\n    _defineProperty(this, \"handleOnError\", (err, file, inputElem, reason) => {\n      console.log(err);\n    });\n\n    _defineProperty(this, \"handleImportOffer\", () => {\n      this.fileInput.current.click();\n    });\n\n    _defineProperty(this, \"convertToObject\", anArray => {\n      var data = anArray,\n          keys = data.data[0],\n          result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n          temp[k] = a[i];\n        });\n        return temp;\n      });\n      return result;\n    });\n\n    _defineProperty(this, \"convertDataToNumbers\", badArray => {\n      const myData = [...badArray];\n      myData.map((item, i) => {\n        console.log(item, i);\n        newData[i].Entry_Key = parseInt(item.Entry_Key);\n        newData[i].Contest_Key = parseInt(item.Contest_Key);\n        newData[i].Place = parseInt(item.Place);\n        newData[i].Points = parseInt(item.Points);\n        newData[i].Winnings_Non_Ticket = parseInt(item.Winnings_Non_Ticket.slice(1));\n        newData[i].Winnings_Ticket = parseInt(item.Winnings_Ticket.slice(1));\n        newData[i].Contest_Entries = parseInt(item.Contest_Entries);\n        newData[i].Entry_Fee = parseInt(item.Entry_Fee.slice(1));\n        newData[i].Prize_Pool = parseInt(item.Prize_Pool.slice(1));\n        newData[i].Places_Paid = parseInt(item.Places_Paid);\n      });\n      console.log(newData);\n    });\n\n    this.fileInput = React.createRef();\n  }\n\n  componentDidMount() {\n    const myData = [{\n      amount: '$5.00',\n      test: 'test'\n    }, {\n      amount: '$10.00',\n      test: 'test'\n    }];\n    const newData = [...myData];\n    myData.map((item, i) => {\n      console.log(item, i);\n      newData[i].amount = parseInt(item.amount.slice(1));\n    });\n    console.log(newData);\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(CSVReader, {\n      onFileLoaded: this.handleReadCSV,\n      inputRef: this.fileInput,\n      style: {\n        display: 'none'\n      },\n      onError: this.handleOnError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleImportOffer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Import\"));\n  }\n\n}\n\nexport default CSVComp;","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/dfs-results/components/CsvUpload.js"],"names":["React","Component","CSVReader","Button","CSVComp","constructor","props","data","console","log","setMyData","convertToObject","err","file","inputElem","reason","fileInput","current","click","anArray","keys","result","slice","map","a","temp","forEach","k","i","badArray","myData","item","newData","Entry_Key","parseInt","Contest_Key","Place","Points","Winnings_Non_Ticket","Winnings_Ticket","Contest_Entries","Entry_Fee","Prize_Pool","Places_Paid","createRef","componentDidMount","amount","test","render","handleReadCSV","display","handleOnError","handleImportOffer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n \nimport { CSVReader } from 'react-papaparse'\nimport Button from '@material-ui/core/Button';\n \nclass CSVComp extends Component {\n  constructor(props) {\n    super(props)\n    this.fileInput = React.createRef()\n  }\n  componentDidMount() {\n    const myData = [\n    {\n      amount: '$5.00',\n      test: 'test'\n    },\n    {\n      amount: '$10.00',\n      test: 'test'\n    }\n\n    \n\n  ]\n\n  const newData = [...myData]\n  \n  myData.map((item, i) => {\n    console.log(item, i)\n    newData[i].amount = parseInt(item.amount.slice(1))\n  })\n  \n  console.log(newData)\n\n  \n  }\n \n  handleReadCSV = (data) => {\n    console.log(data)\n    this.props.setMyData(this.convertToObject(data))\n    \n    \n  }\n \n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n \n  handleImportOffer = () => {\n    this.fileInput.current.click()\n  }\n\n  convertToObject = (anArray) => {\n    var data = anArray,\n    keys = data.data[0],\n    result = data.data.slice(2).map(function (a) {\n        var temp = {};\n        keys.forEach(function (k, i) {\n            temp[k] = a[i];\n        })\n        return temp;\n    });\n    \n    return result\n\n};\nconvertDataToNumbers = (badArray) => {\n  const myData = [...badArray]\n  \n  myData.map((item, i) => {\n    console.log(item, i)\n    newData[i].Entry_Key = parseInt(item.Entry_Key)\n    newData[i].Contest_Key = parseInt(item.Contest_Key)\n    newData[i].Place = parseInt(item.Place)\n    newData[i].Points = parseInt(item.Points)\n    newData[i].Winnings_Non_Ticket = parseInt(item.Winnings_Non_Ticket.slice(1))\n    newData[i].Winnings_Ticket = parseInt(item.Winnings_Ticket.slice(1))\n    newData[i].Contest_Entries = parseInt(item.Contest_Entries)\n    newData[i].Entry_Fee = parseInt(item.Entry_Fee.slice(1))\n    newData[i].Prize_Pool = parseInt(item.Prize_Pool.slice(1))\n    newData[i].Places_Paid = parseInt(item.Places_Paid)\n    \n\n\n  })\n  \n  console.log(newData)\n  \n    \n\n\n}\n \n  render() {\n    return (\n      <>\n        <CSVReader\n          onFileLoaded={this.handleReadCSV}\n          inputRef={this.fileInput}\n          style={{display: 'none'}}\n          onError={this.handleOnError}\n        />\n\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleImportOffer}>\n            Import\n        </Button>\n       \n      </>\n    )\n  }\n}\n \nexport default CSVComp"]},"metadata":{},"sourceType":"module"}