{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'isomorphic-unfetch';\nimport clientCredentials from '../credentials/client';\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  _createClass(Index, null, [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var req, query, user, messages;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              req = _ref.req, query = _ref.query;\n              user = req && req.session ? req.session.decodedToken : null; // don't fetch anything from firebase if the user is not found\n              // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\n              // const messages = snap && snap.val()\n\n              messages = null;\n              return _context.abrupt(\"return\", {\n                user: user,\n                messages: messages\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      user: _this.props.user,\n      value: '',\n      messages: _this.props.messages\n    };\n    _this.addDbListener = _this.addDbListener.bind(_assertThisInitialized(_this));\n    _this.removeDbListener = _this.removeDbListener.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.initializeApp(clientCredentials);\n      if (this.state.user) this.addDbListener();\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (user) {\n          _this2.setState({\n            user: user\n          });\n\n          return user.getIdToken().then(function (token) {\n            // eslint-disable-next-line no-undef\n            return fetch('/api/login', {\n              method: 'POST',\n              // eslint-disable-next-line no-undef\n              headers: new Headers({\n                'Content-Type': 'application/json'\n              }),\n              credentials: 'same-origin',\n              body: _JSON$stringify({\n                token: token\n              })\n            });\n          }).then(function (res) {\n            return _this2.addDbListener();\n          });\n        } else {\n          _this2.setState({\n            user: null\n          }); // eslint-disable-next-line no-undef\n\n\n          fetch('/api/logout', {\n            method: 'POST',\n            credentials: 'same-origin'\n          }).then(function () {\n            return _this2.removeDbListener();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"addDbListener\",\n    value: function addDbListener() {\n      var _this3 = this;\n\n      var db = firebase.firestore();\n      var unsubscribe = db.collection('messages').onSnapshot(function (querySnapshot) {\n        var messages = {};\n        querySnapshot.forEach(function (doc) {\n          messages[doc.id] = doc.data();\n        });\n        if (messages) _this3.setState({\n          messages: messages\n        });\n      }, function (error) {\n        console.error(error);\n      });\n      this.setState({\n        unsubscribe: unsubscribe\n      });\n    }\n  }, {\n    key: \"removeDbListener\",\n    value: function removeDbListener() {\n      // firebase.database().ref('messages').off()\n      if (this.state.unsubscribe) {\n        this.state.unsubscribe();\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      var db = firebase.firestore();\n      var date = new Date().getTime();\n      console.log(this.state.user.email);\n      var myObject = [{\n        game: '1',\n        value: 5\n      }];\n      db.collection('results').doc(\"\".concat(this.state.user.email)).set({\n        // id: date,\n        text: myObject\n      });\n      this.setState({\n        value: ''\n      });\n    }\n  }, {\n    key: \"handleLogin\",\n    value: function handleLogin() {\n      firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());\n    }\n  }, {\n    key: \"handleLogout\",\n    value: function handleLogout() {\n      firebase.auth().signOut();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          value = _this$state.value,\n          messages = _this$state.messages;\n      return __jsx(\"div\", null, user ? __jsx(\"button\", {\n        onClick: this.handleLogout\n      }, \"Logout\") : __jsx(\"button\", {\n        onClick: this.handleLogin\n      }, \"Login\"), user && __jsx(\"div\", null, __jsx(\"form\", {\n        onSubmit: this.handleSubmit\n      }, __jsx(\"input\", {\n        type: 'text',\n        onChange: this.handleChange,\n        placeholder: 'add message...',\n        value: value\n      })), __jsx(\"ul\", null, messages && _Object$keys(messages).map(function (key) {\n        return __jsx(\"li\", {\n          key: key\n        }, messages[key].text);\n      }))), __jsx(Entry, null));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };","map":{"version":3,"sources":["/Users/StephenReiser/Desktop/SteveProject/dfs-results/pages/index.js"],"names":["React","Component","firebase","clientCredentials","Index","req","query","user","session","decodedToken","messages","props","state","value","addDbListener","bind","removeDbListener","handleChange","handleSubmit","initializeApp","auth","onAuthStateChanged","setState","getIdToken","then","token","fetch","method","headers","Headers","credentials","body","res","db","firestore","unsubscribe","collection","onSnapshot","querySnapshot","forEach","doc","id","data","error","console","event","target","preventDefault","date","Date","getTime","log","email","myObject","game","set","text","signInWithPopup","GoogleAuthProvider","signOut","handleLogout","handleLogin","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'isomorphic-unfetch'\nimport clientCredentials from '../credentials/client'\n\nexport default class Index extends Component {\n  static async getInitialProps({ req, query }) {\n    const user = req && req.session ? req.session.decodedToken : null\n    // don't fetch anything from firebase if the user is not found\n    // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\n    // const messages = snap && snap.val()\n    const messages = null\n    return { user, messages }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      user: this.props.user,\n      value: '',\n      messages: this.props.messages,\n    }\n\n    this.addDbListener = this.addDbListener.bind(this)\n    this.removeDbListener = this.removeDbListener.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    firebase.initializeApp(clientCredentials)\n\n    if (this.state.user) this.addDbListener()\n\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user: user })\n        return user\n          .getIdToken()\n          .then(token => {\n            // eslint-disable-next-line no-undef\n            return fetch('/api/login', {\n              method: 'POST',\n              // eslint-disable-next-line no-undef\n              headers: new Headers({ 'Content-Type': 'application/json' }),\n              credentials: 'same-origin',\n              body: JSON.stringify({ token }),\n            })\n          })\n          .then(res => this.addDbListener())\n      } else {\n        this.setState({ user: null })\n        // eslint-disable-next-line no-undef\n        fetch('/api/logout', {\n          method: 'POST',\n          credentials: 'same-origin',\n        }).then(() => this.removeDbListener())\n      }\n    })\n  }\n\n  addDbListener() {\n    var db = firebase.firestore()\n    let unsubscribe = db.collection('messages').onSnapshot(\n      querySnapshot => {\n        var messages = {}\n        querySnapshot.forEach(function(doc) {\n          messages[doc.id] = doc.data()\n        })\n        if (messages) this.setState({ messages })\n      },\n      error => {\n        console.error(error)\n      }\n    )\n    this.setState({ unsubscribe })\n  }\n\n  removeDbListener() {\n    // firebase.database().ref('messages').off()\n    if (this.state.unsubscribe) {\n      this.state.unsubscribe()\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    var db = firebase.firestore()\n    const date = new Date().getTime()\n    console.log(this.state.user.email)\n    const myObject = [{game: '1', value: 5}]\n    db.collection('results')\n      .doc(`${this.state.user.email}`)\n      .set({\n        // id: date,\n        text: myObject,\n      })\n    this.setState({ value: '' })\n    \n  }\n\n  handleLogin() {\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider())\n  }\n\n  handleLogout() {\n    firebase.auth().signOut()\n  }\n\n  render() {\n    const { user, value, messages } = this.state\n\n    return (\n      <div>\n        {user ? (\n          <button onClick={this.handleLogout}>Logout</button>\n        ) : (\n          <button onClick={this.handleLogin}>Login</button>\n        )}\n        {user && (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type={'text'}\n                onChange={this.handleChange}\n                placeholder={'add message...'}\n                value={value}\n              />\n            </form>\n            <ul>\n              {messages &&\n                Object.keys(messages).map(key => (\n                  <li key={key}>{messages[key].text}</li>\n                ))}\n            </ul>\n          </div>\n        )}\n        <Entry />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}